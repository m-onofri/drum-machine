{"version":3,"sources":["components/pads.js","components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["PADS","id","src","button","keyCode","DrumPad","handlePress","e","props","drumPad","makeSound","displaySound","handleClick","padId","target","soundId","filter","pad","sound","document","getElementById","currentTime","play","addEventListener","this","removeEventListener","className","onClick","class","React","Component","App","state","setState","map","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAYiBA,EAZJ,CACT,CAACC,GAAI,WAAYC,IAAK,2DAA4DC,OAAQ,IAAKC,QAAS,IACxG,CAACH,GAAI,SAAUC,IAAK,yDAA0DC,OAAQ,IAAKC,QAAS,IACpG,CAACH,GAAI,WAAYC,IAAK,2DAA4DC,OAAQ,IAAKC,QAAS,IACxG,CAACH,GAAI,eAAgBC,IAAK,+DAAgEC,OAAQ,IAAKC,QAAS,IAChH,CAACH,GAAI,UAAWC,IAAK,0DAA2DC,OAAQ,IAAKC,QAAS,IACtG,CAACH,GAAI,WAAYC,IAAK,2DAA4DC,OAAQ,IAAKC,QAAS,IACxG,CAACH,GAAI,aAAcC,IAAK,6DAA8DC,OAAQ,IAAKC,QAAS,IAC5G,CAACH,GAAI,aAAcC,IAAK,6DAA8DC,OAAQ,IAAKC,QAAS,IAC5G,CAACH,GAAI,gBAAiBC,IAAK,gEAAiEC,OAAQ,IAAKC,QAAS,KCoCvGC,E,2MAhCXC,YAAc,SAACC,GACKA,EAAEH,UACF,EAAKI,MAAMC,QAAQL,UAC/B,EAAKM,YACL,EAAKF,MAAMG,aAAa,EAAKH,MAAMC,QAAQR,M,EAInDW,YAAc,SAACL,GACX,IAAMM,EAAQN,EAAEO,OAAOb,GACjBc,EAAUf,EAAKgB,QAAO,SAAAC,GAAG,OAAIA,EAAIhB,KAAOY,KAAO,GAAGV,OAClDe,EAAQC,SAASC,eAAeL,GACtC,EAAKL,UAAUQ,GACf,EAAKV,MAAMG,aAAaE,I,EAG5BH,UAAY,SAACH,GACT,IAAMW,EAAQC,SAASC,eAAe,EAAKZ,MAAMC,QAAQN,QACzDe,EAAMG,YAAc,EACpBH,EAAMI,Q,mFA1BNH,SAASI,iBAAiB,UAAWC,KAAKlB,e,6CAI1Ca,SAASM,oBAAoB,UAAWD,KAAKlB,e,+BAyBvC,IAAD,OACL,OACI,4BAAQL,GAAIuB,KAAKhB,MAAMC,QAAQR,GAAIyB,UAAU,6BAA6BC,QAAS,SAACpB,GAAD,OAAM,EAAKK,YAAYL,KACtG,2BAAOqB,MAAM,OAAO3B,GAAIuB,KAAKhB,MAAMC,QAAQN,OAAQD,IAAKsB,KAAKhB,MAAMC,QAAQP,MAC1EsB,KAAKhB,MAAMC,QAAQN,Y,GApCd0B,IAAMC,WC0BbC,G,iNAtBbC,MAAQ,CACNf,IAAK,e,EAGPN,aAAe,SAACE,GACd,EAAKoB,SAAS,CACZhB,IAAKJ,K,wEAIC,IAAD,OACP,OACE,yBAAKZ,GAAG,gBACN,yBAAKA,GAAG,UAAUyB,UAAU,OAAOF,KAAKQ,MAAMf,KAC9C,yBAAKhB,GAAG,gBACLD,EAAKkC,KAAI,SAAAjB,GAAG,OAAI,kBAAC,EAAD,CAASR,QAASQ,EAAKN,aAAc,EAAKA,wB,GAjBnDkB,IAAMC,YCOJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SD6H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.82f6b2d1.chunk.js","sourcesContent":["const PADS = [\n    {id: \"Heater-1\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\", button: \"Q\", keyCode: 81},\n    {id: \"Dsc_Oh\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\", button: \"W\", keyCode: 87},\n    {id: \"Heater-6\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\", button: \"E\", keyCode: 69},\n    {id: \"Side_stick_1\", src: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\", button: \"A\", keyCode: 65},\n    {id: \"Brk_Snr\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\", button: \"S\", keyCode: 83},\n    {id: \"Heater-3\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\", button: \"D\", keyCode: 68},\n    {id: \"Kick_n_Hat\", src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\", button: \"Z\", keyCode: 90},\n    {id: \"RP4_Kick_1\", src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\", button: \"X\", keyCode: 88},\n    {id: \"punchy_kick_1\", src: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\", button: \"C\", keyCode: 67}\n  ];\n\n  export default PADS;","import React from 'react';\nimport PADS from './pads.js';\n\nclass DrumPad extends React.Component {\n  \n    componentDidMount() {\n        document.addEventListener('keydown', this.handlePress);\n    }\n    \n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handlePress);\n    }\n    \n    handlePress = (e) => {\n        const padCode = e.keyCode;\n        if (padCode === this.props.drumPad.keyCode) {\n            this.makeSound();\n            this.props.displaySound(this.props.drumPad.id);\n        }\n    }\n    \n    handleClick = (e) => {\n        const padId = e.target.id;\n        const soundId = PADS.filter(pad => pad.id === padId)[0].button;\n        const sound = document.getElementById(soundId);\n        this.makeSound(sound);\n        this.props.displaySound(padId);\n    }\n    \n    makeSound = (e) => {\n        const sound = document.getElementById(this.props.drumPad.button);\n        sound.currentTime = 0;\n        sound.play();\n    }\n    \n    render() {\n        return (\n            <button id={this.props.drumPad.id} className=\"is-primary button drum-pad\" onClick={(e) =>this.handleClick(e)} >\n                <audio class=\"clip\" id={this.props.drumPad.button} src={this.props.drumPad.src}></audio>\n                {this.props.drumPad.button}\n            </button>\n        );\n    }\n}\n\nexport default DrumPad;","import React from 'react';\nimport DrumPad from './components/DrumPad.js';\nimport PADS from './components/pads.js';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  state = {\n    pad: \"Let's play!\"\n  }\n\n  displaySound = (padId) => {\n    this.setState({\n      pad: padId\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <div id=\"display\" className=\"box\">{this.state.pad}</div>\n        <div id=\"columns pads\">\n          {PADS.map(pad => <DrumPad drumPad={pad} displaySound={this.displaySound} /> )} \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}